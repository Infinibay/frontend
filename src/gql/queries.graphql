query currentUser {
  currentUser {
    id
    firstName
    lastName
    role
    email
    avatar
    createdAt
    namespace
  }
}

query user($id: String!) {
  user(id: $id) {
    id
    firstName
    lastName
    role
    email
    avatar
    createdAt
  }
}

query users($pagination: PaginationInputType, $orderBy: UserOrderByInputType) {
  users(pagination: $pagination, orderBy: $orderBy) {
    id
    firstName
    lastName
    role
    email
    avatar
    createdAt
  }
}

# query login($password: String!, $email: String!) {
#   login(password: $password, email: $email) {
#     token
#   }
# }

query machineTemplate($id: String!) {
  machineTemplate(id: $id) {
    id
    name
    description
    cores
    ram
    storage
    createdAt
    categoryId
    totalMachines
  }
}

query machineTemplates($orderBy: MachineTemplateOrderBy, $pagination: PaginationInputType) {
  machineTemplates(orderBy: $orderBy, pagination: $pagination) {
    id
    name
    description
    cores
    ram
    storage
    createdAt
    categoryId
    totalMachines
  }
}

query machine($id: String!) {
  machine(id: $id) {
    id
    name
    configuration
    status
    userId
    templateId
    createdAt
    localIP
    publicIP
    template {
      id
      name
      description
      cores
      ram
      storage
      createdAt
      categoryId
      totalMachines
    }
    department {
      id
      name
      createdAt
      internetSpeed
      ipSubnet
      totalMachines
    }
    user {
      id
      firstName
      lastName
      role
      email
      avatar
      createdAt
    }
  }
}

query machines($orderBy: MachineOrderBy, $pagination: PaginationInputType) {
  machines(orderBy: $orderBy, pagination: $pagination) {
    id
    name
    configuration
    status
    userId
    templateId
    createdAt
    localIP
    publicIP
    template {
      id
      name
      description
      cores
      ram
      storage
      createdAt
      categoryId
      totalMachines
    }
    department {
      id
      name
      createdAt
      internetSpeed
      ipSubnet
      totalMachines
    }
    user {
      id
      firstName
      lastName
      role
      email
      avatar
      createdAt
    }
  }
}

query graphicConnection($id: String!) {
  graphicConnection(id: $id) {
    link
    password
    protocol
  }
}

query checkSetupStatus {
  checkSetupStatus {
    value
  }
}

query departments {
  departments {
    id
    name
    createdAt
    internetSpeed
    ipSubnet
    totalMachines
  }
}

query department($id: String!) {
  department(id: $id) {
    id
    name
    createdAt
    internetSpeed
    ipSubnet
    totalMachines
  }
}

query findDepartmentByName($name: String!) {
  findDepartmentByName(name: $name) {
    id
    name
    createdAt
    internetSpeed
    ipSubnet
    totalMachines
  }
}

query machineTemplateCategories {
  machineTemplateCategories {
    id
    name
    description
    createdAt
    totalTemplates
    totalMachines
  }
}

query machineTemplateCategory($id: String!) {
  machineTemplateCategory(id: $id) {
    id
    name
    description
    createdAt
    totalTemplates
    totalMachines
  }
}

query applications {
  applications {
    id
    name
    description
    os
    installCommand
    parameters
    icon
    createdAt
  }
}

query application($id: String!) {
  application(id: $id) {
    id
    name
    description
    os
    installCommand
    parameters
    icon
    createdAt
  }
}

query getGraphics {
  getGraphics {
    pciBus
    vendor
    model
    memory
  }
}

query GetSystemResources {
  getSystemResources {
    cpu {
      total
      available
    }
    memory {
      total
      available
    }
    disk {
      total
      available
      used
    }
  }
}

query networks {
  networks {
    name
    uuid
    bridge {
      name
      stp
      delay
    }
    ip {
      address
      netmask
      dhcp {
        range {
          start
          end
        }
      }
    }
    description
  }
}

query network($name: String!) {
  network(name: $name) {
    name
    uuid
    bridge {
      name
      stp
      delay
    }
    ip {
      address
      netmask
      dhcp {
        range {
          start
          end
        }
      }
    }
    description
  }
}

# DEPRECATED - Service queries not implemented in backend yet
# query listServices($machineId: String!) {
#   listServices(machineId: $machineId) {
#     name
#     displayName
#     status
#     startType
#     pid
#     description
#   }
# }

# query listSecurityServices {
#   listSecurityServices {
#     id
#     name
#     description
#     category
#     priority
#     riskLevel
#     defaultUseEnabled
#     defaultProvideEnabled
#     ports {
#       number
#       protocol
#       description
#     }
#   }
# }

# query getVmServiceStatus($serviceId: ID!, $vmId: ID!) {
#   getVmServiceStatus(serviceId: $serviceId, vmId: $vmId) {
#     vmId
#     vmName
#     serviceId
#     serviceName
#     useEnabled
#     provideEnabled
#     running
#     lastSeen
#   }
# }

# query getDepartmentVmsServiceStatus($serviceId: ID!, $departmentId: ID!) {
#   getDepartmentVmsServiceStatus(serviceId: $serviceId, departmentId: $departmentId) {
#     vmId
#     vmName
#     serviceId
#     serviceName
#     useEnabled
#     provideEnabled
#     running
#     lastSeen
#   }
# }

# query getDepartmentServiceStatus($serviceId: ID!, $departmentId: ID!) {
#   getDepartmentServiceStatus(serviceId: $serviceId, departmentId: $departmentId) {
#     departmentId
#     departmentName
#     serviceId
#     serviceName
#     useEnabled
#     provideEnabled
#     vmCount
#     enabledVmCount
#   }
# }

# query getGlobalServiceStatus($serviceId: ID!) {
#   getGlobalServiceStatus(serviceId: $serviceId) {
#     serviceId
#     serviceName
#     useEnabled
#     provideEnabled
#   }
# }

# query getServiceStatusSummary {
#   getServiceStatusSummary {
#     serviceId
#     serviceName
#     totalVms
#     runningVms
#     enabledVms
#   }
# }

# ==================== FIREWALL QUERIES ====================

# Get firewall rules for a department
query GetDepartmentFirewallRules($departmentId: ID!) {
  getDepartmentFirewallRules(departmentId: $departmentId) {
    id
    name
    internalName
    entityType
    entityId
    priority
    isActive
    libvirtUuid
    lastSyncedAt
    createdAt
    updatedAt
    rules {
      id
      ruleSetId
      name
      description
      action
      direction
      priority
      protocol
      srcPortStart
      srcPortEnd
      dstPortStart
      dstPortEnd
      srcIpAddr
      srcIpMask
      dstIpAddr
      dstIpMask
      connectionState
      overridesDept
      createdAt
      updatedAt
    }
  }
}

# Get firewall rules for a VM
query GetVMFirewallRules($vmId: ID!) {
  getVMFirewallRules(vmId: $vmId) {
    id
    name
    internalName
    entityType
    entityId
    priority
    isActive
    libvirtUuid
    lastSyncedAt
    createdAt
    updatedAt
    rules {
      id
      ruleSetId
      name
      description
      action
      direction
      priority
      protocol
      srcPortStart
      srcPortEnd
      dstPortStart
      dstPortEnd
      srcIpAddr
      srcIpMask
      dstIpAddr
      dstIpMask
      connectionState
      overridesDept
      createdAt
      updatedAt
    }
  }
}

# Get effective firewall rules for a VM (department + VM merged)
query GetEffectiveFirewallRules($vmId: ID!) {
  getEffectiveFirewallRules(vmId: $vmId) {
    vmId
    departmentRules {
      id
      ruleSetId
      name
      description
      action
      direction
      priority
      protocol
      srcPortStart
      srcPortEnd
      dstPortStart
      dstPortEnd
      srcIpAddr
      srcIpMask
      dstIpAddr
      dstIpMask
      connectionState
      overridesDept
      createdAt
      updatedAt
    }
    vmRules {
      id
      ruleSetId
      name
      description
      action
      direction
      priority
      protocol
      srcPortStart
      srcPortEnd
      dstPortStart
      dstPortEnd
      srcIpAddr
      srcIpMask
      dstIpAddr
      dstIpMask
      connectionState
      overridesDept
      createdAt
      updatedAt
    }
    effectiveRules {
      id
      ruleSetId
      name
      description
      action
      direction
      priority
      protocol
      srcPortStart
      srcPortEnd
      dstPortStart
      dstPortEnd
      srcIpAddr
      srcIpMask
      dstIpAddr
      dstIpMask
      connectionState
      overridesDept
      createdAt
      updatedAt
    }
    conflicts {
      type
      message
      affectedRules {
        id
        name
        description
        action
        direction
        priority
        protocol
        dstPortStart
        dstPortEnd
      }
    }
  }
}

# List all Infinibay filters in libvirt
query ListInfinibayFilters {
  listInfinibayFilters {
    name
    uuid
  }
}

# ==================== SCRIPT QUERIES ====================

# Get all scripts with optional filtering
query Scripts($filters: ScriptFiltersInput) {
  scripts(filters: $filters) {
    id
    name
    description
    fileName
    category
    tags
    os
    shell
    hasInputs
    inputCount
    createdAt
    updatedAt
    createdBy {
      id
      firstName
      lastName
      email
    }
  }
}

# Get single script with full content and parsed inputs
query Script($id: ID!) {
  script(id: $id) {
    id
    name
    description
    fileName
    category
    tags
    os
    shell
    hasInputs
    inputCount
    content
    parsedInputs {
      name
      type
      label
      description
      default
      required
      validation
      options {
        label
        value
      }
    }
    createdAt
    updatedAt
    createdBy {
      id
      firstName
      lastName
      email
    }
  }
}

# Get scripts assigned to a department
query DepartmentScripts($departmentId: ID!) {
  departmentScripts(departmentId: $departmentId) {
    id
    name
    description
    fileName
    category
    tags
    os
    shell
    hasInputs
    inputCount
    createdAt
    updatedAt
    createdBy {
      id
      firstName
      lastName
      email
    }
  }
}

# Get script execution history for a VM
query ScriptExecutions($machineId: ID!, $status: ExecutionStatus, $limit: Int) {
  scriptExecutions(machineId: $machineId, status: $status, limit: $limit) {
    id
    script {
      id
      name
      description
    }
    machine {
      id
      name
    }
    executionType
    triggeredBy {
      id
      firstName
      lastName
    }
    inputValues
    status
    startedAt
    completedAt
    exitCode
    stdout
    stderr
    error
    executedAs
    createdAt
  }
}

# Get single script execution details
query ScriptExecution($id: ID!) {
  scriptExecution(id: $id) {
    id
    script {
      id
      name
      description
    }
    machine {
      id
      name
    }
    executionType
    triggeredBy {
      id
      firstName
      lastName
    }
    inputValues
    status
    startedAt
    completedAt
    exitCode
    stdout
    stderr
    error
    executedAs
    createdAt
  }
}

# Get list of users on a VM for "Run As" selection
query VmUsers($machineId: ID!) {
  vmUsers(machineId: $machineId)
}

