# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AppSettings {
  createdAt: DateTimeISO!
  id: ID!
  interfaceSize: String!
  logoUrl: String
  theme: String!
  updatedAt: DateTimeISO!
  wallpaper: String!
}

input AppSettingsInput {
  interfaceSize: String
  logoUrl: String
  theme: String
  wallpaper: String
}

type ApplicationInfo {
  installDate: DateTimeISO
  installLocation: String
  name: String!
  publisher: String
  sizeInMB: Float
  version: String
}

type ApplicationInventory {
  applications: [ApplicationInfo!]!
  error: String
  success: Boolean!
  timestamp: DateTimeISO!
  totalCount: Int!
  vmId: ID!
}

type ApplicationType {
  createdAt: DateTimeISO!
  description: String
  icon: String
  id: ID!
  installCommand: JSONObject!
  name: String!
  os: [String!]!
  parameters: JSONObject
}

type ApplicationUpdateInfo {
  applicationName: String!
  availableVersion: String!
  canUpdate: Boolean!
  currentVersion: String!
  downloadUrl: String
  installDate: DateTimeISO
  installLocation: String
  installType: String
  isSecurityUpdate: Boolean!
  lastUpdateCheck: DateTimeISO
  registryKey: String
  releaseDate: DateTimeISO
  sizeInMB: Float
  updateSizeBytes: Float
  updateSource: String
  updateType: String
  vendor: String
}

type ApplicationUpdates {
  availableUpdates: [ApplicationUpdateInfo!]!
  error: String
  executionTimeMs: Int
  microsoftStoreUpdatesCount: Int
  success: Boolean!
  summary: String
  timestamp: DateTimeISO!
  totalUpdatesCount: Int!
  vmId: ID!
  windowsUpdatesCount: Int
}

type BackgroundHealthServiceStatus {
  activeQueues: Int!
  cronActive: Boolean!
  isRunning: Boolean!
  lastRun: DateTimeISO!
  nextRun: DateTimeISO
  pendingChecks: Int!
  totalVMsMonitored: Int!
}

input BridgeNameInput {
  bridgeName: String! = ""
  networkName: String! = ""
}

type CleanupResultType {
  filterNames: [String!]!
  filtersRemoved: Int!
  success: Boolean!
}

type CommandExecutionResponseType {
  message: String!
  response: String
  success: Boolean!
}

"""Generic command execution result"""
type CommandResult {
  """Error message if command failed"""
  error: String

  """Command output"""
  output: String

  """Standard error"""
  stderr: String

  """Standard output"""
  stdout: String

  """Whether the command was successful"""
  success: Boolean!
}

"""Type of rule conflict"""
enum ConflictType {
  CONTRADICTORY
  DUPLICATE
  PORT_OVERLAP
  PRIORITY_CONFLICT
}

input CreateApplicationInputType {
  description: String
  installCommand: JSONObject!
  name: String! = ""
  os: [String!]! = []
  parameters: JSONObject = null
}

input CreateFirewallRuleInput {
  action: RuleAction!
  connectionState: JSONObject
  description: String
  direction: RuleDirection!
  dstIpAddr: String
  dstIpMask: String
  dstPortEnd: Int
  dstPortStart: Int
  name: String!
  overridesDept: Boolean = false
  priority: Int!
  protocol: String = "all"
  srcIpAddr: String
  srcIpMask: String
  srcPortEnd: Int
  srcPortStart: Int
}

input CreateMachineInputType {
  applications: [MachineApplicationInputType!]! = []
  customCores: Int
  customRam: Int
  customStorage: Int
  departmentId: ID = ""
  firstBootScripts: [FirstBootScriptInputType!]! = []
  name: String! = ""
  os: MachineOs! = WINDOWS10
  password: String! = ""
  pciBus: String = null
  productKey: String
  templateId: String
  username: String! = ""
}

input CreateMaintenanceTaskInput {
  cronSchedule: String
  description: String
  isEnabled: Boolean! = true
  isRecurring: Boolean! = false
  machineId: ID!
  name: String!
  parameters: JSONObject
  runAt: DateTimeISO
  taskType: MaintenanceTaskType!
}

input CreateNetworkInput {
  bridgeName: String! = ""
  description: String! = ""
  enableIntraNetworkCommunication: Boolean
  enabledServices: [String!]
  ipConfig: NetworkIpConfigInput
  name: String! = ""
}

input CreateScriptInput {
  category: String
  content: String!
  description: String
  format: ScriptFormat!
  name: String!
  tags: [String!]
}

input CreateSnapshotInput {
  description: String
  machineId: String!
  name: String!
}

input CreateUserInputType {
  """User avatar image path"""
  avatar: String
  email: String! = ""
  firstName: String! = ""
  lastName: String! = ""
  password: String! = ""
  passwordConfirmation: String! = ""
  role: UserRole! = USER
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type DefenderScanResult {
  error: String
  filesScanned: Int!
  scanDuration: Float!
  scanType: String!
  success: Boolean!
  threatsFound: Int!
  timestamp: DateTimeISO!
  vmId: ID!
}

input DeleteNetworkInput {
  name: String!
}

input DeleteSnapshotInput {
  machineId: String!
  snapshotName: String!
}

type DepartmentType {
  createdAt: DateTimeISO!
  id: ID!
  internetSpeed: Int
  ipSubnet: String
  name: String!
  totalMachines: Float
}

type DiskCleanupResult {
  drive: String!
  error: String
  filesDeleted: Int!
  spaceClearedMB: Float!
  success: Boolean!
  targetsProcessed: [String!]!
  timestamp: DateTimeISO!
  vmId: ID!
}

type DiskDriveInfo {
  drive: String!
  freeGB: Float!
  label: String!
  status: HealthCheckSeverity!
  totalGB: Float!
  usedGB: Float!
  usedPercent: Float!
}

type DiskSpaceInfo {
  criticalThreshold: Float
  drives: [DiskDriveInfo!]!
  error: String
  success: Boolean!
  timestamp: DateTimeISO!
  vmId: ID!
  warningThreshold: Float
}

type DyummyType {
  value: String!
}

type EffectiveRuleSetType {
  conflicts: [RuleConflictType!]!
  departmentRules: [FirewallRuleType!]!
  effectiveRules: [FirewallRuleType!]!
  vmId: ID!
  vmRules: [FirewallRuleType!]!
}

input ExecuteMaintenanceInput {
  machineId: ID!
  parameters: JSONObject
  taskType: MaintenanceTaskType!
}

input ExecuteScriptInput {
  inputValues: JSON!
  machineId: ID!
  runAs: String
  scriptId: ID!
}

"""Script execution status"""
enum ExecutionStatus {
  CANCELLED
  FAILED
  PENDING
  RUNNING
  SUCCESS
  TIMEOUT
}

"""Script execution trigger type"""
enum ExecutionType {
  FIRST_BOOT
  ON_DEMAND
  SCHEDULED
}

type FirewallRuleSetType {
  createdAt: DateTimeISO!
  entityId: String!
  entityType: RuleSetType!
  id: ID!
  internalName: String!
  isActive: Boolean!
  lastSyncedAt: DateTimeISO
  libvirtUuid: String
  name: String!
  priority: Int!
  rules: [FirewallRuleType!]!
  updatedAt: DateTimeISO!
  xmlContent: String
}

type FirewallRuleType {
  action: RuleAction!
  connectionState: JSONObject
  createdAt: DateTimeISO!
  description: String
  direction: RuleDirection!
  dstIpAddr: String
  dstIpMask: String
  dstPortEnd: Int
  dstPortStart: Int
  id: ID!
  name: String!
  overridesDept: Boolean!
  priority: Int!
  protocol: String!
  ruleSetId: String!
  srcIpAddr: String
  srcIpMask: String
  srcPortEnd: Int
  srcPortStart: Int
  updatedAt: DateTimeISO!
}

input FirstBootScriptInputType {
  inputValues: JSONObject!
  scriptId: String! = ""
}

type FlushResultType {
  libvirtFilterName: String!
  rulesApplied: Int!
  success: Boolean!
  timestamp: DateTimeISO!
  vmId: ID!
}

type GPU {
  memory: Float!
  model: String!
  pciBus: String!
  vendor: String!
}

type GenericHealthCheckResponse {
  checkName: String!
  details: String
  error: String
  message: String!
  severity: HealthCheckSeverity!
  success: Boolean!
  timestamp: DateTimeISO!
  vmId: ID!
}

type GraphicConfigurationType {
  link: String!
  password: String!
  protocol: String!
}

"""Available health check types that can be executed individually"""
enum HealthCheckName {
  APPLICATION_HEALTH
  BOOT_TIME
  CPU_USAGE
  CRITICAL_SERVICES
  DISK_FRAGMENTATION
  DISK_HEALTH
  DISK_SPACE
  EVENT_LOG_ERRORS
  FIREWALL_STATUS
  MEMORY_USAGE
  NETWORK_CONNECTIVITY
  PERFORMANCE_COUNTERS
  REGISTRY_HEALTH
  RESOURCE_OPTIMIZATION
  SECURITY_UPDATES
  STARTUP_PROGRAMS
  SYSTEM_FILES
  SYSTEM_TEMPERATURE
  UPDATE_SERVICES
  WINDOWS_DEFENDER
  WINDOWS_UPDATES
}

type HealthCheckResult {
  checkName: String!
  details: String
  message: String!
  severity: HealthCheckSeverity!
  timestamp: DateTimeISO!
}

type HealthCheckRoundResult {
  error: String
  message: String!
  success: Boolean!
  taskId: String!
  timestamp: DateTimeISO!
}

"""Severity level of health check results"""
enum HealthCheckSeverity {
  FAILED
  INFO
  PASSED
  WARNING
}

type HealthCheckStatus {
  checks: [HealthCheckResult!]!
  error: String
  overallScore: Float!
  success: Boolean!
  timestamp: DateTimeISO!
  vmId: ID!
}

type ISO {
  checksum: String
  createdAt: DateTimeISO!
  downloadUrl: String
  filename: String!
  id: ID!
  isAvailable: Boolean!
  lastVerified: DateTimeISO
  os: String!
  path: String!
  size: String!
  updatedAt: DateTimeISO!
  uploadedAt: DateTimeISO!
  version: String
}

type ISOAvailabilityMap {
  available: Boolean!
  os: String!
}

type ISOStatus {
  available: Boolean!
  iso: ISO
  os: String!
}

type InfiniServiceStatus {
  error: String
  installed: Boolean!
  running: Boolean!
}

type InputOptionType {
  label: String!
  value: String!
}

input IpRangeInput {
  end: String! = ""
  networkName: String! = ""
  start: String! = ""
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""Keep-alive heartbeat metrics for a VM connection"""
type KeepAliveMetrics {
  """Average round-trip time in milliseconds"""
  averageRtt: Float!

  """Consecutive failures (resets on success)"""
  consecutiveFailures: Int!

  """Total keep-alive failures (cumulative)"""
  failureCount: Int!

  """Timestamp of last keep-alive failure"""
  lastFailure: String

  """Timestamp of last keep-alive response received"""
  lastReceived: String

  """Timestamp of last keep-alive request sent"""
  lastSent: String

  """Total keep-alive responses received"""
  receivedCount: Int!

  """Total keep-alive requests sent"""
  sentCount: Int!

  """Keep-alive success rate as percentage (e.g., "95.5%" or "N/A")"""
  successRate: String!
}

type LibvirtFilterInfoType {
  name: String!
  uuid: String
}

"""Login response with user data and token"""
type LoginResponse {
  token: String!
  user: UserType!
}

type Machine {
  configuration: JSONObject
  cpuCores: Int
  createdAt: DateTimeISO
  department: DepartmentType
  departmentId: String
  diskSizeGB: Int
  gpuPciAddress: String
  id: ID!
  internalName: String!
  localIP: String
  name: String!
  os: String!
  publicIP: String
  ramGB: Int
  status: String!
  template: MachineTemplateType
  templateId: String
  user: UserType
  userId: String
}

input MachineApplicationInputType {
  applicationId: String! = ""
  machineId: String! = ""
  parameters: JSONObject
}

input MachineOrderBy {
  direction: OrderByDirection
  fieldName: MachineOrderByField
}

"""The field to order machines by"""
enum MachineOrderByField {
  CONFIG
  CREATED_AT
  ID
  STATUS
  TEMPLATE_ID
  USER_ID
}

"""The os of the machine"""
enum MachineOs {
  FEDORA
  UBUNTU
  WINDOWS10
  WINDOWS11
}

input MachineTemplateCategoryInputType {
  description: String = null
  name: String! = ""
}

type MachineTemplateCategoryType {
  createdAt: DateTimeISO!
  description: String
  id: ID!
  name: String!
  totalMachines: Int
  totalTemplates: Int
}

input MachineTemplateInputType {
  """The ID of the category for the machine template"""
  categoryId: ID = null

  """The number of cores for the machine"""
  cores: Int! = 0

  """A brief description of the machine template"""
  description: String! = ""

  """The name of the machine template"""
  name: String! = ""

  """The amount of RAM (in GB) for the machine"""
  ram: Int! = 0

  """The storage space (in GB) for the machine"""
  storage: Int! = 0
}

input MachineTemplateOrderBy {
  direction: OrderByDirection
  fieldName: MachineTemplateOrderByField
}

"""The field to order machine templates by"""
enum MachineTemplateOrderByField {
  CORES
  CREATED_AT
  ID
  NAME
  RAM
  STORAGE
}

type MachineTemplateType {
  categoryId: ID
  cores: Int!
  createdAt: DateTimeISO!
  description: String
  id: ID!
  name: String
  ram: Int!
  storage: Int!
  totalMachines: Int
}

type MachineType {
  id: ID!
  name: String!
  os: String!
  status: String!
}

type MaintenanceExecutionResponse {
  error: String
  execution: MaintenanceHistory
  message: String
  success: Boolean!
}

type MaintenanceHistory {
  duration: Float
  error: String
  executedAt: DateTimeISO!
  executedByUserId: ID
  id: ID!
  machineId: ID!
  parameters: JSONObject
  result: JSONObject
  status: MaintenanceStatus!
  taskId: ID
  taskType: MaintenanceTaskType!
  triggeredBy: MaintenanceTrigger!
}

type MaintenanceStats {
  enabledTasks: Float!
  failedExecutions: Float!
  lastExecutionDate: DateTimeISO
  machineId: ID!
  pendingTasks: Float!
  recurringTasks: Float!
  successfulExecutions: Float!
  totalExecutions: Float!
  totalTasks: Float!
}

"""Status of maintenance task execution"""
enum MaintenanceStatus {
  CANCELLED
  FAILED
  RUNNING
  SUCCESS
  TIMEOUT
}

type MaintenanceTask {
  createdAt: DateTimeISO!
  createdByUserId: ID!
  cronSchedule: String
  description: String
  executionStatus: String!
  id: ID!
  isEnabled: Boolean!
  isRecurring: Boolean!
  lastRunAt: DateTimeISO
  machineId: ID!
  name: String!
  nextRunAt: DateTimeISO
  parameters: JSONObject
  runAt: DateTimeISO
  taskType: MaintenanceTaskType!
  updatedAt: DateTimeISO!
}

type MaintenanceTaskResponse {
  error: String
  message: String
  success: Boolean!
  task: MaintenanceTask
}

"""Types of maintenance tasks that can be performed"""
enum MaintenanceTaskType {
  CUSTOM_SCRIPT
  DEFENDER_SCAN
  DEFRAG
  DISK_CHECK
  DISK_CLEANUP
  REGISTRY_CLEANUP
  SYSTEM_FILE_CHECK
  WINDOWS_UPDATES
}

"""What triggered the maintenance task execution"""
enum MaintenanceTrigger {
  MANUAL
  SCHEDULED
}

type Mutation {
  assignScriptToDepartment(departmentId: ID!, scriptId: ID!): Boolean!

  """Calculate ISO checksum"""
  calculateISOChecksum(isoId: String!): String!
  cancelScriptExecution(id: ID!): ScriptExecutionResponseType!
  cleanupInfinibayFirewall: CleanupResultType!
  createApplication(input: CreateApplicationInputType!): ApplicationType!
  createDepartment(name: String!): DepartmentType!
  createDepartmentFirewallRule(departmentId: ID!, input: CreateFirewallRuleInput!): FirewallRuleType!
  createMachine(input: CreateMachineInputType!): Machine!
  createMachineTemplate(input: MachineTemplateInputType!): MachineTemplateType!
  createMachineTemplateCategory(input: MachineTemplateCategoryInputType!): MachineTemplateCategoryType!
  createMaintenanceTask(input: CreateMaintenanceTaskInput!): MaintenanceTaskResponse!
  createNetwork(input: CreateNetworkInput!): Boolean!
  createScript(input: CreateScriptInput!): ScriptResponseType!

  """Create a snapshot of a virtual machine"""
  createSnapshot(input: CreateSnapshotInput!): SnapshotResult!
  createUser(input: CreateUserInputType!): UserType!
  createVMFirewallRule(input: CreateFirewallRuleInput!, vmId: ID!): FirewallRuleType!
  deleteApplication(id: String!): Boolean!
  deleteFirewallRule(ruleId: ID!): Boolean!
  deleteMaintenanceTask(id: ID!): MaintenanceTaskResponse!
  deleteNetwork(input: DeleteNetworkInput!): Boolean!
  deleteScript(id: ID!): ScriptResponseType!

  """Delete a snapshot from a virtual machine"""
  deleteSnapshot(input: DeleteSnapshotInput!): SuccessType!
  destroyDepartment(id: String!): DepartmentType!
  destroyMachine(id: String!): SuccessType!
  destroyMachineTemplate(id: String!): Boolean!
  destroyMachineTemplateCategory(id: String!): Boolean!
  executeCommand(command: String!, id: String!): CommandExecutionResponseType!
  executeImmediateMaintenance(input: ExecuteMaintenanceInput!): MaintenanceExecutionResponse!
  executeMaintenanceTask(taskId: ID!): MaintenanceExecutionResponse!
  executeScript(input: ExecuteScriptInput!): ScriptExecutionResponseType!
  flushFirewallRules(vmId: ID!): FlushResultType!
  forcePowerOff(id: String!): SuccessType!

  """Force power off and restore snapshot (emergency recovery)"""
  forceRestoreSnapshot(input: RestoreSnapshotInput!): SuccessType!

  """Install a package on a virtual machine (legacy compatibility)"""
  installPackage(machineId: ID!, packageName: String!): CommandResult!
  killProcess(force: Boolean! = false, machineId: String!, pid: Int!): ProcessControlResult!
  killProcesses(force: Boolean! = false, machineId: String!, pids: [Int!]!): [ProcessControlResult!]!
  login(email: String!, password: String!): LoginResponse

  """Install, remove, or update a package on a virtual machine"""
  managePackage(input: PackageManagementInput!): PackageManagementResult!
  moveMachine(departmentId: String!, id: String!): Machine!

  """Perform disk cleanup on a VM"""
  performDiskCleanup(drive: String!, targets: [String!], vmId: ID!): DiskCleanupResult!
  powerOff(id: String!): SuccessType!
  powerOn(id: String!): SuccessType!
  queueAllVMHealthChecks: HealthCheckRoundResult!

  """Register uploaded ISO"""
  registerISO(filename: String!, os: String!, path: String!, size: Float!): ISO!

  """Remove ISO file"""
  removeISO(isoId: String!): Boolean!

  """Remove a package from a virtual machine (legacy compatibility)"""
  removePackage(machineId: ID!, packageName: String!): CommandResult!
  resetMachine(id: String!): SuccessType!
  restartMachine(id: String!): SuccessType!

  """Restore a virtual machine to a snapshot"""
  restoreSnapshot(input: RestoreSnapshotInput!): SuccessType!

  """Run Windows Defender quick scan on a VM"""
  runDefenderQuickScan(vmId: ID!): DefenderScanResult!
  setNetworkBridgeName(input: BridgeNameInput!): Boolean!
  setNetworkIp(input: NetworkIpInput!): Boolean!
  setNetworkIpRange(input: IpRangeInput!): Boolean!
  setupNode: DyummyType!
  suspend(id: String!): SuccessType!
  syncFirewallToLibvirt: SyncResultType!

  """Sync ISOs with filesystem"""
  syncISOs: Boolean!
  toggleMaintenanceTask(enabled: Boolean!, id: ID!): MaintenanceTaskResponse!
  triggerHealthCheckRound: HealthCheckRoundResult!
  unassignScriptFromDepartment(departmentId: ID!, scriptId: ID!): Boolean!
  updateAppSettings(input: AppSettingsInput!): AppSettings!
  updateApplication(id: String!, input: CreateApplicationInputType!): ApplicationType!
  updateDepartmentName(input: UpdateDepartmentNameInput!): DepartmentType!
  updateFirewallRule(input: UpdateFirewallRuleInput!, ruleId: ID!): FirewallRuleType!
  updateMachineHardware(input: UpdateMachineHardwareInput!): Machine!
  updateMachineName(input: UpdateMachineNameInput!): Machine!
  updateMachineTemplate(id: String!, input: MachineTemplateInputType!): MachineTemplateType!
  updateMachineTemplateCategory(id: String!, input: MachineTemplateCategoryInputType!): MachineTemplateCategoryType!
  updateMachineUser(input: UpdateMachineUserInput!): Machine!
  updateMaintenanceTask(input: UpdateMaintenanceTaskInput!): MaintenanceTaskResponse!

  """Update a package on a virtual machine (legacy compatibility)"""
  updatePackage(machineId: ID!, packageName: String!): CommandResult!
  updateScript(input: UpdateScriptInput!): ScriptResponseType!
  updateUser(id: String!, input: UpdateUserInputType!): UserType!

  """Validate ISO file integrity"""
  validateISO(isoId: String!): Boolean!
}

type Network {
  bridge: NetworkBridge!
  description: String
  ip: NetworkIp!
  name: String!
  uuid: String!
}

type NetworkBridge {
  delay: String!
  name: String!
  stp: String!
}

type NetworkDhcp {
  range: NetworkDhcpRange!
}

type NetworkDhcpRange {
  end: String!
  start: String!
}

input NetworkDhcpRangeInput {
  end: String! = ""
  start: String! = ""
}

type NetworkIp {
  address: String!
  dhcp: NetworkDhcp
  netmask: String!
}

input NetworkIpConfigInput {
  address: String! = ""
  dhcp: NetworkDhcpRangeInput
  netmask: String! = ""
}

input NetworkIpInput {
  address: String! = ""
  netmask: String! = ""
  networkName: String! = ""
}

"""Operating system"""
enum OS {
  LINUX
  WINDOWS
}

enum OrderByDirection {
  ASC
  DESC
}

"""Available package management actions"""
enum PackageAction {
  INSTALL
  REMOVE
  UPDATE
}

"""Information about a software package"""
type PackageInfo {
  """Package description"""
  description: String

  """Whether the package is installed"""
  installed: Boolean!

  """Package name"""
  name: String!

  """Package publisher or vendor"""
  publisher: String

  """Package source or repository"""
  source: String

  """Package version"""
  version: String!
}

"""Input for package management operations"""
input PackageManagementInput {
  """Action to perform on the package"""
  action: PackageAction! = INSTALL

  """ID of the target machine"""
  machineId: ID! = ""

  """Name of the package to manage"""
  packageName: String! = ""
}

"""Result of a package management operation"""
type PackageManagementResult {
  """Error message if operation failed"""
  error: String

  """Human-readable message about the operation"""
  message: String!

  """List of packages (for list operations)"""
  packages: [PackageInfo!]

  """Standard error from the command"""
  stderr: String

  """Standard output from the command"""
  stdout: String

  """Whether the operation was successful"""
  success: Boolean!
}

input PaginationInputType {
  skip: Int = 0
  take: Int = 20
}

type ProcessControlResult {
  error: String
  message: String!
  pid: Int
  processName: String
  success: Boolean!
}

type Query {
  """Get all ISOs (available and unavailable)"""
  allISOs: [ISO!]!
  application(id: String!): ApplicationType
  applications: [ApplicationType!]!

  """Get all available ISOs"""
  availableISOs: [ISO!]!
  backgroundHealthServiceStatus: BackgroundHealthServiceStatus!

  """Check for application updates on a VM"""
  checkApplicationUpdates(vmId: ID!): ApplicationUpdates!

  """Check if ISO is available for specific OS"""
  checkISOStatus(os: String!): ISOStatus!

  """Check availability for multiple OS types"""
  checkMultipleOSAvailability(osList: [String!]!): [ISOAvailabilityMap!]!

  """Check resource optimization opportunities for a VM"""
  checkResourceOptimization(evaluationWindowDays: Float, vmId: ID!): ResourceOptimizationInfo!
  checkSetupStatus: DyummyType!

  """Check overall system readiness"""
  checkSystemReadiness: SystemReadiness!

  """Check disk space status for a VM"""
  checkVMDiskSpace(criticalThreshold: Float, vmId: ID!, warningThreshold: Float): DiskSpaceInfo!

  """Check Windows Defender status for a VM"""
  checkWindowsDefender(vmId: ID!): WindowsDefenderStatus!

  """Check Windows Updates status for a VM"""
  checkWindowsUpdates(vmId: ID!): WindowsUpdateInfo!

  """Get the current snapshot of a virtual machine"""
  currentSnapshot(machineId: String!): Snapshot
  currentUser: UserType
  department(id: String!): DepartmentType
  departmentScripts(departmentId: ID!): [ScriptType!]!
  departments: [DepartmentType!]!
  dueMaintenanceTasks: [MaintenanceTask!]!
  findDepartmentByName(name: String!): DepartmentType
  getAppSettings: AppSettings!
  getDepartmentFirewallRules(departmentId: ID!): FirewallRuleSetType
  getEffectiveFirewallRules(vmId: ID!): EffectiveRuleSetType!
  getGraphics: [GPU!]!
  getLatestVMHealth(machineId: ID!): VMHealthSnapshotType

  """Get supported OS types"""
  getSupportedOSTypes: [String!]!
  getSystemResources: SystemResources!

  """Get installed applications inventory for a VM"""
  getVMApplicationInventory(vmId: ID!): ApplicationInventory!
  getVMFirewallRules(vmId: ID!): FirewallRuleSetType

  """Get comprehensive health check status for a VM"""
  getVMHealthStatus(vmId: ID!): HealthCheckStatus!

  """
  Get automated recommendations for VM optimization, security, and maintenance based on system analysis. Returns up to 20 recommendations by default to prevent over-fetch. Use pagination for more results.
  """
  getVMRecommendations(
    """
    Optional filters to limit recommendations by type, date range, or count
    """
    filter: RecommendationFilterInput

    """
    If true, regenerate recommendations from latest health data instead of returning cached results
    """
    refresh: Boolean = false

    """ID of the virtual machine to get recommendations for"""
    vmId: ID!
  ): [VMRecommendationType!]!

  """Get Windows Update history for a VM"""
  getWindowsUpdateHistory(days: Float, vmId: ID!): WindowsUpdateHistory!
  graphicConnection(id: String!): GraphicConfigurationType
  healthCheckQueueStats: QueueStatsType!
  healthQueueStatistics: QueueStatistics!
  latestVMHealthSnapshot(machineId: ID!): VMHealthSnapshotType
  listInfinibayFilters: [LibvirtFilterInfoType!]!

  """List all installed packages on a virtual machine"""
  listInstalledPackages(machineId: ID!): [PackageInfo!]!
  machine(id: String!): Machine

  """List all snapshots for a virtual machine"""
  machineSnapshots(machineId: String!): SnapshotListResult!
  machineTemplate(id: String!): MachineTemplateType
  machineTemplateCategories: [MachineTemplateCategoryType!]!
  machineTemplateCategory(id: String!): MachineTemplateCategoryType
  machineTemplates(orderBy: MachineTemplateOrderBy, pagination: PaginationInputType): [MachineTemplateType!]!
  machines(orderBy: MachineOrderBy, pagination: PaginationInputType): [Machine!]!
  maintenanceHistory(limit: Float = 50, machineId: ID!, status: MaintenanceStatus, taskType: MaintenanceTaskType): [MaintenanceHistory!]!
  maintenanceStats(machineId: ID!): MaintenanceStats!
  maintenanceTask(id: ID!): MaintenanceTask
  maintenanceTasks(machineId: ID!, status: String): [MaintenanceTask!]!
  network(name: String!): Network!
  networks: [Network!]!

  """Run a specific health check on a VM"""
  runHealthCheck(checkName: HealthCheckName!, vmId: ID!): GenericHealthCheckResponse!
  script(id: ID!): ScriptType
  scriptExecution(id: ID!): ScriptExecutionType
  scriptExecutions(limit: Int = 50, machineId: ID!, status: ExecutionStatus): [ScriptExecutionType!]!
  scripts(filters: ScriptFiltersInput): [ScriptType!]!

  """Search for available packages on a virtual machine"""
  searchPackages(machineId: ID!, query: String!): [PackageInfo!]!

  """Get current socket connection statistics for all VMs"""
  socketConnectionStats: SocketConnectionStats
  user(id: String!): UserType!
  users(orderBy: UserOrderByInputType, pagination: PaginationInputType): [UserType!]!
  validateFirewallRule(input: CreateFirewallRuleInput!): ValidationResultType!
  vmHealthCheckQueue(limit: Int = 20, machineId: ID, offset: Int = 0, status: String): [VMHealthCheckQueueType!]!
  vmHealthHistory(limit: Int = 20, machineId: ID!, offset: Int = 0): [VMHealthSnapshotType!]!
  vmHealthStats(machineId: ID!): VMHealthStatsType!

  """Get comprehensive diagnostics for VM socket connection issues"""
  vmSocketDiagnostics(vmId: String!): VmDiagnostics!
  vmUsers(machineId: ID!): [String!]!
}

type QueueStatistics {
  activeChecks: Int!
  completedToday: Int!
  failedToday: Int!
  pendingTasks: Int!
  totalQueues: Int!
}

type QueueStatsType {
  completed: Int!
  failed: Int!
  pending: Int!
  retryScheduled: Int!
  running: Int!
  totalToday: Int!
}

"""Filters for querying VM recommendations with specific criteria"""
input RecommendationFilterInput {
  """Only return recommendations created after this date/time"""
  createdAfter: DateTimeISO

  """Only return recommendations created before this date/time"""
  createdBefore: DateTimeISO

  """
  Maximum number of recommendations to return (for pagination, defaults to 20, max 100)
  """
  limit: Float

  """
  Filter by specific recommendation types (e.g., only security or storage recommendations)
  """
  types: [RecommendationType!]
}

"""
Types of VM recommendations that can be generated by the system based on health checks and system analysis
"""
enum RecommendationType {
  """
  Generated when application updates, especially security updates, are available
  """
  APP_UPDATE_AVAILABLE

  """
  Generated when Windows Defender antivirus or real-time protection is disabled
  """
  DEFENDER_DISABLED

  """
  Generated when Windows Defender has detected active threats or quarantined items
  """
  DEFENDER_THREAT

  """
  Generated when disk space usage exceeds warning thresholds (typically 80-90%)
  """
  DISK_SPACE_LOW

  """
  Generated when specific applications are consuming excessive CPU resources
  """
  HIGH_CPU_APP

  """
  Generated when specific applications are consuming excessive memory resources
  """
  HIGH_RAM_APP

  """Generated when critical or security Windows updates are available"""
  OS_UPDATE_AVAILABLE

  """
  Generated for miscellaneous recommendations that do not fit other categories
  """
  OTHER

  """
  Generated when VM resources (CPU/RAM) are consistently underutilized over time
  """
  OVER_PROVISIONED

  """
  Generated when firewall rules are blocking ports that applications are trying to use
  """
  PORT_BLOCKED

  """
  Generated when VM resources are consistently over-utilized and affecting performance
  """
  UNDER_PROVISIONED
}

type ResourceOptimizationInfo {
  error: String
  evaluationWindowDays: Float
  overallStatus: HealthCheckSeverity!
  recommendations: [ResourceRecommendation!]!
  success: Boolean!
  timestamp: DateTimeISO!
  vmId: ID!
}

type ResourceRecommendation {
  currentValue: Float!
  potentialSavingsPercent: Float
  reason: String!
  recommendedValue: Float!
  resource: String!
  unit: String!
}

input RestoreSnapshotInput {
  machineId: String!
  snapshotName: String!
}

"""Action to take on matched traffic"""
enum RuleAction {
  ACCEPT
  DROP
  REJECT
}

type RuleConflictType {
  affectedRules: [FirewallRuleType!]!
  message: String!
  type: ConflictType!
}

"""Direction of network traffic"""
enum RuleDirection {
  IN
  INOUT
  OUT
}

"""Type of firewall rule set (Department or VM)"""
enum RuleSetType {
  DEPARTMENT
  VM
}

type ScriptExecutionResponseType {
  error: String
  execution: ScriptExecutionType
  message: String
  success: Boolean!
}

type ScriptExecutionType {
  completedAt: DateTimeISO
  createdAt: DateTimeISO!
  error: String
  executedAs: String
  executionType: ExecutionType!
  exitCode: Int
  id: ID!
  inputValues: JSON!
  machine: MachineType!
  script: ScriptType!
  startedAt: DateTimeISO
  status: ExecutionStatus!
  stderr: String
  stdout: String
  triggeredBy: UserType
}

input ScriptFiltersInput {
  category: String
  os: OS
  search: String
  tags: [String!]
}

"""Script file format"""
enum ScriptFormat {
  JSON
  YAML
}

type ScriptInputType {
  default: JSON
  description: String
  label: String!
  name: String!
  options: [InputOptionType!]
  required: Boolean!
  type: String!
  validation: JSON
}

type ScriptResponseType {
  error: String
  message: String
  script: ScriptType
  success: Boolean!
}

type ScriptType {
  category: String
  content: String
  createdAt: DateTimeISO!
  createdBy: UserType
  departmentCount: Int
  description: String
  executionCount: Int
  fileName: String!
  hasInputs: Boolean!
  id: ID!
  inputCount: Int!
  name: String!
  os: [OS!]!
  parsedInputs: [ScriptInputType!]!
  shell: ShellType!
  tags: [String!]!
  updatedAt: DateTimeISO!
}

"""Shell type for script execution"""
enum ShellType {
  BASH
  CMD
  POWERSHELL
  SH
}

type Snapshot {
  createdAt: DateTimeISO!
  description: String
  hasMetadata: Boolean!
  id: ID!
  isCurrent: Boolean!
  name: String!
  parentId: String
  state: String!
  vmId: String!
  vmName: String!
}

type SnapshotListResult {
  message: String!
  snapshots: [Snapshot!]!
  success: Boolean!
}

type SnapshotResult {
  message: String!
  snapshot: Snapshot
  success: Boolean!
}

type SocketConnectionStats {
  activeConnections: Float
  connections: [VmConnectionInfo!]
  isConnected: Boolean
  lastMessageTime: String
  reconnectAttempts: Float
  totalConnections: Float
}

type SuccessType {
  message: String!
  success: Boolean!
}

type SyncResultType {
  errors: [String!]!
  filtersCreated: Int!
  filtersUpdated: Int!
  success: Boolean!
  vmsUpdated: Int!
}

type SystemReadiness {
  availableOS: [String!]!
  missingOS: [String!]!
  ready: Boolean!
}

type SystemResourceCPU {
  available: Float!
  total: Float!
}

type SystemResourceDisk {
  available: Float!
  total: Float!
  used: Float!
}

type SystemResourceMemory {
  available: Float!
  total: Float!
}

type SystemResources {
  cpu: SystemResourceCPU!
  disk: SystemResourceDisk!
  memory: SystemResourceMemory!
}

input UpdateDepartmentNameInput {
  id: ID! = ""
  name: String! = ""
}

input UpdateFirewallRuleInput {
  action: RuleAction
  connectionState: JSONObject
  description: String
  direction: RuleDirection
  dstIpAddr: String
  dstIpMask: String
  dstPortEnd: Int
  dstPortStart: Int
  name: String
  overridesDept: Boolean
  priority: Int
  protocol: String
  srcIpAddr: String
  srcIpMask: String
  srcPortEnd: Int
  srcPortStart: Int
}

input UpdateMachineHardwareInput {
  """New number of CPU cores"""
  cpuCores: Int

  """New GPU PCI address (e.g., 0000:01:00.0). Set to null to remove GPU."""
  gpuPciAddress: String
  id: ID! = ""

  """New RAM in GB"""
  ramGB: Int
}

input UpdateMachineNameInput {
  id: ID! = ""

  """New name for the machine"""
  name: String! = ""
}

input UpdateMachineUserInput {
  id: ID! = ""

  """User ID to assign to the machine. Set to null to unassign."""
  userId: String = null
}

input UpdateMaintenanceTaskInput {
  cronSchedule: String
  description: String
  id: ID!
  isEnabled: Boolean
  isRecurring: Boolean
  name: String
  parameters: JSONObject
  runAt: DateTimeISO
}

input UpdateScriptInput {
  category: String
  content: String
  description: String
  id: ID!
  name: String
  tags: [String!]
}

input UpdateUserInputType {
  """User avatar image path"""
  avatar: String

  """Current password required when updating password"""
  currentPassword: String
  firstName: String
  lastName: String
  password: String
  passwordConfirmation: String
  role: UserRole
}

"""The field to order users by"""
enum UserOrderByField {
  CREATED_AT
  EMAIL
  FIRST_NAME
  ID
  LAST_NAME
  ROLE
  UPDATED_AT
}

input UserOrderByInputType {
  direction: OrderByDirection
  fieldName: UserOrderByField
}

"""The basic roles of users"""
enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
}

"""User model"""
type UserType {
  """User avatar image path"""
  avatar: String
  createdAt: DateTimeISO!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!

  """User namespace for real-time events"""
  namespace: String
  role: String!
}

type VMHealthCheckQueueType {
  attempts: Int!
  checkType: String!
  completedAt: DateTimeISO
  createdAt: DateTimeISO!
  error: String
  executedAt: DateTimeISO
  executionTimeMs: Int
  id: ID!
  machineId: ID!
  maxAttempts: Int!
  payload: JSONObject
  priority: String!
  result: JSONObject
  scheduledFor: DateTimeISO!
  status: String!
  updatedAt: DateTimeISO!
}

type VMHealthSnapshotType {
  applicationInventory: JSONObject
  checksCompleted: Int!
  checksFailed: Int!
  createdAt: DateTimeISO!
  customCheckResults: JSONObject
  defenderStatus: JSONObject
  diskSpaceInfo: JSONObject
  errorSummary: String
  executionTimeMs: Int
  id: ID!
  machineId: ID!
  osType: String
  overallStatus: String!
  resourceOptInfo: JSONObject
  snapshotDate: DateTimeISO!
  updatedAt: DateTimeISO!
  windowsUpdateInfo: JSONObject
}

type VMHealthStatsType {
  errorSnapshots: Int!
  healthySnapshots: Int!
  lastHealthCheck: DateTimeISO
  lastHealthStatus: String
  totalSnapshots: Int!
  warningSnapshots: Int!
}

"""
Represents an automated recommendation for VM optimization, security, or maintenance
"""
type VMRecommendationType {
  """Suggested action to address the recommendation"""
  actionText: String!

  """Timestamp when this recommendation was generated"""
  createdAt: DateTimeISO!

  """
  Additional structured data specific to this recommendation type (metrics, thresholds, affected resources)
  """
  data: JSONObject

  """Unique identifier for the recommendation"""
  id: ID!

  """ID of the VM this recommendation applies to"""
  machineId: ID!

  """
  ID of the health snapshot that generated this recommendation, if applicable
  """
  snapshotId: ID

  """Human-readable description of the issue or opportunity identified"""
  text: String!

  """Category of recommendation (storage, performance, security, etc.)"""
  type: RecommendationType!
}

type ValidationResultType {
  conflicts: [RuleConflictType!]!
  isValid: Boolean!
  warnings: [String!]!
}

type VmConnectionInfo {
  isConnected: Boolean!

  """Keep-alive heartbeat metrics"""
  keepAlive: KeepAliveMetrics
  lastMessageTime: String!
  reconnectAttempts: Float!
  vmId: String!
}

type VmDiagnostics {
  connectionStats: VmConnectionInfo
  diagnostics: [String!]!
  infiniService: InfiniServiceStatus!
  manualCommands: [String!]!
  recommendations: [String!]!
  timestamp: String!
  vmId: String!
  vmName: String!
  vmStatus: String!
}

type WindowsDefenderStatus {
  antispywareEnabled: Boolean!
  antivirusEnabled: Boolean!
  antivirusSignatureLastUpdated: DateTimeISO!
  antivirusSignatureVersion: String!
  error: String
  lastFullScanTime: DateTimeISO
  lastQuickScanTime: DateTimeISO
  overallStatus: HealthCheckSeverity!
  realTimeProtectionEnabled: Boolean!
  success: Boolean!
  threatsDetected: Int!
  threatsQuarantined: Int!
  timestamp: DateTimeISO!
  vmId: ID!
}

type WindowsUpdateHistory {
  daysIncluded: Float
  error: String
  success: Boolean!
  timestamp: DateTimeISO!
  totalCount: Int!
  updates: [WindowsUpdateHistoryItem!]!
  vmId: ID!
}

type WindowsUpdateHistoryItem {
  description: String
  installDate: DateTimeISO!
  kbArticle: String
  resultCode: String
  status: String!
  title: String!
}

type WindowsUpdateInfo {
  criticalUpdatesCount: Int!
  error: String
  lastCheckTime: DateTimeISO
  lastInstallTime: DateTimeISO
  pendingUpdates: [WindowsUpdateItem!]!
  pendingUpdatesCount: Int!
  securityUpdatesCount: Int!
  success: Boolean!
  timestamp: DateTimeISO!
  vmId: ID!
}

type WindowsUpdateItem {
  description: String
  kbArticle: String
  severity: String!
  sizeInMB: Float!
  title: String!
}